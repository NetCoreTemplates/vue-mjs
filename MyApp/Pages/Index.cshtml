@page
@model IndexModel
@inject BlogPosts BlogPosts
@{
    ViewData["Title"] = "Home page";
}

<div class="container mx-auto px-5">
    <section class="flex-col md:flex-row flex items-center md:justify-between mt-16 mb-16 md:mb-12">
        <h1 class="text-6xl md:text-8xl font-bold tracking-tighter leading-tight md:pr-8">Vue.mjs</h1>
        <div class="flex flex-col">
            <h4 class="text-lg mt-5">A Modern .NET + JS App with 
                <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules" class="@Css.LinkUnderline">JS modules</a>, 
                <a href="https://vuejs.org" class="@Css.LinkUnderline">Vue.js</a>,
                <a href="https://htmx.org" class="@Css.LinkUnderline">htmx</a> &amp; Markdown
            </h4>
            <div class="flex justify-between items-center">
                <div id="hello-api" class="mr-4"></div>
                @Html.SrcComponent("HelloApi.mjs", size:"w-8 h-8 mt-2")
            </div>
        </div>
    </section>
</div>

<div class="container mx-auto px-5">
@{
    var posts = BlogPosts.GetPosts().Take(3).ToList();
    var post = posts.FirstOrDefault();
    if (post != null)
    {
        <section>
            <div class="mb-8 md:mb-16">
                <div class="sm:mx-0">
                    <a aria-label="@post.Title" href="@BlogPosts.GetPostLink(post)">
                        <img src="@post.Splash" alt="Cover Image for @post.Title" class="shadow-sm hover:shadow-2xl transition-shadow duration-200">
                    </a>
                </div>
            </div>
            <div class="md:grid md:grid-cols-2 md:gap-x-16 lg:gap-x-8 mb-20 md:mb-28">
                <div>
                    <h3 class="mb-4 text-4xl lg:text-6xl leading-tight">
                        <a class="hover:underline" href="@BlogPosts.GetPostLink(post)">@post.Title</a>
                    </h3>
                    <div class="mb-4 md:mb-0 text-lg">
                        <time datetime="@BlogPosts.GetDateTimestamp(post.Date)">@BlogPosts.GetDateLabel(post.Date)</time>
                    </div>
                </div>
                <div>
                    <p class="text-lg leading-relaxed mb-4">@post.Summary</p>
                    <div class="flex items-center">
                        <img src="@BlogPosts.GetAuthorProfileUrl(post.Author)" class="w-12 h-12 rounded-full mr-4" alt="Author">
                        <div class="text-xl font-bold">@post.Author</div>
                    </div>
                </div>
            </div>
        </section>
    }

    void RenderPost(MarkdownFileInfo post)
    {
        <div>
            <div class="mb-5">
                <div class="sm:mx-0">
                    <a aria-label="@post.Title" href="@BlogPosts.GetPostLink(post)">
                        <img src="@post.Splash" alt="Cover Image for @post.Title" class="shadow-sm hover:shadow-2xl transition-shadow duration-200">
                    </a>
                </div>
            </div>
            <h3 class="text-3xl mb-3 leading-snug">
                <a class="hover:underline" href="@BlogPosts.GetPostLink(post)">@post.Title</a>
            </h3>
            <div class="text-lg mb-4">
                <time datetime="@BlogPosts.GetDateTimestamp(post.Date)">@BlogPosts.GetDateLabel(post.Date)</time>
            </div>
            <p class="text-lg leading-relaxed mb-4">@post.Summary</p>
            <div class="flex items-center">
                <img src="@BlogPosts.GetAuthorProfileUrl(post.Author)" class="w-12 h-12 rounded-full mr-4" alt="@post.Author">
                <div class="text-xl font-bold">@post.Author</div>
            </div>
        </div>        
    }

    var morePosts = posts.Skip(1).ToList();
    if (morePosts.Count == 2)
    {
        <section>
            <h2 class="mb-8 text-6xl md:text-7xl font-bold tracking-tighter leading-tight">More Stories</h2>
            <div class="grid grid-cols-1 md:grid-cols-2 md:gap-x-16 lg:gap-x-32 gap-y-20 md:gap-y-32 mb-32">
                @{ RenderPost(morePosts[0]); }
                @{ RenderPost(morePosts[1]); }
            </div>
        </section>        
    }
}
</div>

<section>
    <h2 class="text-4xl md:text-6xl font-bold tracking-tighter leading-tight md:pr-8 whitespace-nowrap text-center pt-8">
      Getting Started
    </h2>
    <div class="mb-8 md:mb-16">
        <div class="sm:mx-0 sm:px-4 sm:py-8 flex justify-evenly">
            <div id="getting-started"></div>
        </div>
        <div class="flex justify-center">
            @Html.SrcComponent("GettingStarted.mjs")
        </div>
    </div>
</section>

<section>
    <div class="mx-auto max-w-xl py-8 sm:py-16">
        <div class="text-center">
            <h2 class="py-2 text-3xl font-bold text-gray-900 dark:text-gray-100 sm:text-4xl">
                Simple, Modern JavaScript Development
            </h2>
            <p class="py-2 text-lg text-gray-500 dark:text-gray-400">
                Leverage Modern Browser features for Simple, Fast App development
            </p>
        </div>

        <ul role="list" class="mt-4 divide-y divide-gray-200 dark:divide-gray-800 border-t border-b border-gray-200 dark:border-gray-800">
        @{
            void NavListItem(string title, string childContent)
            {
                <li class="relative flex items-start space-x-4 py-6">
                    <div class="min-w-0 flex-1 px-2 sm:px-0">
                        <h3 class="text-base font-medium text-gray-900 dark:text-gray-100">
                            <span class="rounded-sm focus-within:ring-2 focus-within:ring-indigo-500 focus-within:ring-offset-2">
                                <span class="focus:outline-none">
                                    @title
                                </span>
                            </span>
                        </h3>
                        <p class="text-base text-gray-500">
                            @Html.Raw(childContent)
                        </p>
                    </div>
                </li>
            }
            NavListItem("Simple", "No <b>node_modules</b>, no build tools, no client side routing, no heavy client state");
            NavListItem("Fast", $"Initial SSR HTML &amp; JSON for fast <a href='https://web.dev/fcp/' class='{Css.Link}'>FCP</a>, avoid full page reloads with <a href='https://htmx.org/attributes/hx-boost/' class='{Css.Link}'>htmx boost</a>");
            NavListItem("Lightweight", "Only load JS each page needs, built-in optimizer for optimal dev &amp; prod bundles");
            NavListItem("Modern", "Use latest Vue3, htmx or any preferred 3rd Party libraries");
            NavListItem("Rapid Development", "View code &amp; style changes instantly on Save with <b>dotnet watch</b>");
            NavListItem("Maintainable", "Logically structure &amp; encapsulate components using native JavaScript Modules");
            NavListItem("Type Safety", "Use JSDoc and Library TypeScript definitions for IDE static analysis");
            NavListItem("SEO Friendly", "Use Server Side Rendering for SEO-friendly Markdown and HTML content");
            NavListItem("Tailwind", "Productive, maintainable, responsive-first styling");
            NavListItem("Prerendering", $"<a href='/posts' class='{Css.Link}'>Blog</a> can be prerendered on deployment with <b>$ npm run prerender</b>");
        }
        </ul>
    </div>
</section>

<script type="module">
import { mount } from "/mjs/app.mjs"
import HelloApi from "/mjs/components/HelloApi.mjs" 
import GettingStarted from "/mjs/components/GettingStarted.mjs" 

mount('#hello-api', HelloApi, { value: 'Vue.mjs' })
mount('#getting-started', GettingStarted, { template:'vue-mjs' })
</script>
